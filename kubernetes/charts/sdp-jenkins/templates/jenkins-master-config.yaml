apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "jenkins.fullname" . }}
  namespace: {{ template "jenkins.namespace" . }}
  labels:
    "app.kubernetes.io/name": '{{ template "jenkins.name" .}}'
    "helm.sh/chart": "{{ .Chart.Name }}-{{ .Chart.Version }}"
    "app.kubernetes.io/managed-by": "{{ .Release.Service }}"
    "app.kubernetes.io/instance": "{{ .Release.Name }}"
    "app.kubernetes.io/component": "{{ .Values.master.componentName }}"
data:
  apply_config.sh: |-
{{- if .Values.master.enableXmlConfig }}
    mkdir -p /usr/share/jenkins/ref/secrets/;
    echo "false" > /usr/share/jenkins/ref/secrets/slave-to-master-security-kill-switch;
{{- if .Values.master.overwriteConfig }}
    cp /var/jenkins_config/config.xml /var/jenkins_home;
    cp /var/jenkins_config/jenkins.CLI.xml /var/jenkins_home;
    cp /var/jenkins_config/jenkins.model.JenkinsLocationConfiguration.xml /var/jenkins_home;
  {{- if .Values.master.additionalConfig }}
  {{- range $key, $val := .Values.master.additionalConfig }}
    cp /var/jenkins_config/{{- $key }} /var/jenkins_home;
  {{- end }}
  {{- end }}
{{- else }}
    yes n | cp -i /var/jenkins_config/config.xml /var/jenkins_home;
    yes n | cp -i /var/jenkins_config/jenkins.CLI.xml /var/jenkins_home;
    yes n | cp -i /var/jenkins_config/jenkins.model.JenkinsLocationConfiguration.xml /var/jenkins_home;
  {{- if .Values.master.additionalConfig }}
  {{- range $key, $val := .Values.master.additionalConfig }}
    yes n | cp -i /var/jenkins_config/{{- $key }} /var/jenkins_home;
  {{- end }}
  {{- end }}
{{- end }}
{{- end }}
{{- if .Values.master.overwritePlugins }}
    # remove all plugins from shared volume
    rm -rf /var/jenkins_home/plugins/*
{{- end }}
{{- if .Values.master.installPlugins }}
    # Install missing plugins
    cp /var/jenkins_config/plugins.txt /var/jenkins_home;
    rm -rf /usr/share/jenkins/ref/plugins/*.lock
    /usr/local/bin/install-plugins.sh `echo $(cat /var/jenkins_home/plugins.txt)`;
    # Copy plugins to shared volume
    yes n | cp -i /usr/share/jenkins/ref/plugins/* /var/jenkins_plugins/;
{{- end }}
{{- if .Values.master.scriptApproval }}
    yes n | cp -i /var/jenkins_config/scriptapproval.xml /var/jenkins_home/scriptApproval.xml;
{{- end }}
{{- if and (.Values.master.JCasC.enabled) (.Values.master.sidecars.configAutoReload.enabled) }}
  {{- if not .Values.master.initScripts }}
    mkdir -p /var/jenkins_home/init.groovy.d/;
    yes n | cp -i /var/jenkins_config/*.groovy /var/jenkins_home/init.groovy.d/;
  {{- end }}
{{- end }}
{{- if .Values.master.initScripts }}
    mkdir -p /var/jenkins_home/init.groovy.d/;
    {{- if .Values.master.overwriteConfig }}
    rm -f /var/jenkins_home/init.groovy.d/*.groovy
    {{- end }}
    yes n | cp -i /var/jenkins_config/*.groovy /var/jenkins_home/init.groovy.d/;
{{- end }}
{{- if .Values.master.JCasC.enabled }}
  {{- if .Values.master.sidecars.configAutoReload.enabled }}
    bash -c 'ssh-keygen -y -f <(echo "${ADMIN_PRIVATE_KEY}") > /var/jenkins_home/key.pub'
  {{- else }}
    mkdir -p /var/jenkins_home/casc_configs;
    rm -rf /var/jenkins_home/casc_configs/*
    cp -v /var/jenkins_config/*.yaml /var/jenkins_home/casc_configs
  {{- end }}
{{- end }}
{{- if .Values.master.enableXmlConfig }}
{{- if .Values.master.credentialsXmlSecret }}
    yes n | cp -i /var/jenkins_credentials/credentials.xml /var/jenkins_home;
{{- end }}
{{- if .Values.master.secretsFilesSecret }}
    yes n | mkdir -p /usr/share/jenkins/ref/secrets/ && cp -i /var/jenkins_secrets/* /usr/share/jenkins/ref/secrets/;
{{- end }}
{{- if .Values.master.jobs }}
    for job in $(ls /var/jenkins_jobs); do
      mkdir -p /var/jenkins_home/jobs/$job
      yes {{ if not .Values.master.overwriteJobs }}n{{ end }} | cp -i /var/jenkins_jobs/$job /var/jenkins_home/jobs/$job/config.xml
    done
{{- end }}
{{- end }}
{{- range $key, $val := .Values.master.initScripts }}
  init{{ $key }}.groovy: |-
{{ $val | indent 4 }}
{{- end }}
{{- if .Values.master.JCasC.enabled }}
  {{- if .Values.master.sidecars.configAutoReload.enabled }}
  init-add-ssh-key-to-admin.groovy: |-
    import jenkins.security.*
    import hudson.model.User
    import jenkins.security.ApiTokenProperty
    import jenkins.model.Jenkins
    User u = User.get("{{ .Values.master.adminUser | default "admin" }}")
    ApiTokenProperty t = u.getProperty(ApiTokenProperty.class)
    String sshKeyString = new File('/var/jenkins_home/key.pub').text
    keys_param = new org.jenkinsci.main.modules.cli.auth.ssh.UserPropertyImpl(sshKeyString)
    u.addProperty(keys_param)
    def inst = Jenkins.getInstance()
    def sshDesc = inst.getDescriptor("org.jenkinsci.main.modules.sshd.SSHD")
    sshDesc.setPort({{ .Values.master.sidecars.configAutoReload.sshTcpPort | default 1044 }})
    sshDesc.getActualPort()
    sshDesc.save()
  {{- else }}
# Only add config to this script if we aren't auto-reloading otherwise the pod will restart upon each config change:
{{- range $key, $val := .Values.master.JCasC.configScripts }}
  {{ $key }}.yaml: |-
{{ tpl $val $| indent 4 }}
{{- end }}
{{- end }}
{{- end }}
  plugins.txt: |-
{{- if .Values.master.installPlugins }}
{{- range $index, $val := .Values.master.installPlugins }}
{{ $val | indent 4 }}
{{- end }}
{{- if .Values.master.JCasC.enabled }}
  {{- if not (contains "configuration-as-code" (quote .Values.master.installPlugins)) }}
    configuration-as-code:{{ .Values.master.JCasC.pluginVersion }}
  {{- end }}
  {{- if semverCompare "<=1.19" (printf "%v" .Values.master.JCasC.pluginVersion) }}
    {{- if not (contains "configuration-as-code-support" (quote .Values.master.installPlugins)) }}
    configuration-as-code-support:{{ .Values.master.JCasC.supportPluginVersion }}
    {{- end }}
  {{- end }}
{{- end }}
{{- end }}
