# Default values for jenkins.
# This is a YAML-formatted file.

numAgents: 1
peristentSlaveEnabled: true

nameOverride: jenkins
fullnameOverride: jenkins
# namespaceOverride:


master:
  componentName: "jenkins-master"
  image: "jenkins/jenkins"
  tag: "2.204.1"
  imagePullPolicy: "IfNotPresent"
  imagePullSecretName: ""
  lifecycle:
  numExecutors: 0
  customJenkinsLabels: []
  useSecurity: true
  enableXmlConfig: false
  securityRealm: 
  authorizationStrategy: 
  adminUser: "admin"
  adminPassword: "CHANGEME"
  # adminSshKey: <defaults to auto-generated>
  rollingUpdate: {}
  resources:
    requests:
      cpu: "50m"
      memory: "1024Mi"
    limits:
      cpu: "2000m"
      memory: "3500Mi"
  javaOpts: "-Xms3500m -Xmx3500m"
  # jenkinsOpts: ""
  # jenkinsUrl: ""
  # jenkinsUriPrefix: "/jenkins"
  # jenkinsUrlProtocol: ""
  usePodSecurityContext: true
  runAsUser: 1000
  fsGroup: 1000
  servicePort: 8080
  targetPort: 8080
  serviceType: ClusterIP
  serviceAnnotations: {}
  deploymentLabels: {}
  serviceLabels: {}
  podLabels: {}
  # nodePort: <to set explicitly, choose port between 30000-32767
  healthProbes: true
  healthProbesLivenessTimeout: 5
  healthProbesReadinessTimeout: 5
  healthProbeLivenessPeriodSeconds: 10
  healthProbeReadinessPeriodSeconds: 10
  healthProbeLivenessFailureThreshold: 5
  healthProbeReadinessFailureThreshold: 3
  healthProbeLivenessInitialDelay: 90
  healthProbeReadinessInitialDelay: 60
  slaveListenerPort: 50000
  slaveHostPort: 
  slaveListenerServiceType: "ClusterIP"
  slaveListenerServiceAnnotations: {}
  disabledAgentProtocols:
  csrf:
    defaultCrumbIssuer:
      enabled: true
      proxyCompatability: true
  cli: false
  loadBalancerSourceRanges:
  - 0.0.0.0/0
  # loadBalancerIP: 1.2.3.4
  # javaOpts: >
  #   -Dcom.sun.management.jmxremote.port=4000
  #   -Dcom.sun.management.jmxremote.authenticate=false
  #   -Dcom.sun.management.jmxremote.ssl=false
  # jmxPort: 4000
  extraPorts:
  # - name: BuildInfoProxy
  #   port: 9000

  installPlugins:  
    - authentication-tokens:1.3
    - blueocean:1.18.1
    - blueocean-autofavorite:1.2.4
    - blueocean-bitbucket-pipeline:1.18.1
    - blueocean-commons:1.18.1
    - blueocean-config:1.18.1
    - blueocean-core-js:1.18.1
    - blueocean-dashboard:1.18.1
    - blueocean-display-url:2.3.0
    - blueocean-events:1.18.1
    - blueocean-executor-info:1.18.1
    - blueocean-git-pipeline:1.18.1
    - blueocean-github-pipeline:1.18.1
    - blueocean-i18n:1.18.1
    - blueocean-jira:1.18.1
    - blueocean-jwt:1.18.1
    - blueocean-personalization:1.18.1
    - blueocean-pipeline-api-impl:1.18.1
    - blueocean-pipeline-editor:1.18.1
    - blueocean-pipeline-scm-api:1.18.1
    - blueocean-rest:1.18.1
    - blueocean-rest-impl:1.18.1
    - blueocean-web:1.18.1
    - branch-api:2.5.4
    - build-timeout:1.19
    - cloudbees-bitbucket-branch-source:2.4.5
    - cloudbees-folder:6.9
    - config-file-provider:3.6.2
    - configuration-as-code:1.29
    - configuration-as-code-groovy:1.1
    - credentials:2.2.1
    - credentials-binding:1.20
    - dependency-check-jenkins-plugin:5.0.2
    - dependency-track:2.1.0
    - durable-task:1.30
    - filesystem_scm:2.1
    - git:3.12.0
    - git-client:2.8.0
    - git-server:1.8
    - github:1.29.4
    - github-api:1.95
    - github-branch-source:2.5.6
    - gitlab-api:1.0.5
    - gitlab-branch-source:1.2.1
    - gitlab-hook:1.4.2
    - gitlab-merge-request-jenkins:2.0.0
    - gitlab-plugin:1.5.12
    - gradle:1.33
    - ivy:2.1
    - jackson2-api:2.9.9.1
    - javadoc:1.5
    - jdk-tool:1.3
    - jenkins-design-language:1.18.1
    - job-dsl:1.75
    - jquery:1.12.4-1
    - jquery-detached:1.2.1
    - jsch:0.1.55.1
    - junit:1.28
    - ldap:1.20
    - lockable-resources:2.5
    - matrix-auth:2.4.2
    - matrix-project:1.14
    - maven-plugin:3.4
    - oauth-credentials:0.3
    - pipeline-build-step:2.9
    - pipeline-github-lib:1.0
    - pipeline-graph-analysis:1.10
    - pipeline-input-step:2.10
    - pipeline-milestone-step:1.3.1
    - pipeline-model-api:1.3.9
    - pipeline-model-declarative-agent:1.1.1
    - pipeline-model-definition:1.3.9
    - pipeline-model-extensions:1.3.9
    - pipeline-rest-api:2.12
    - pipeline-stage-step:2.3
    - pipeline-stage-tags-metadata:1.3.9
    - pipeline-stage-view:2.12
    - pipeline-utility-steps:2.3.0
    - resource-disposer:0.13
    - scm-api:2.6.3
    - script-security:1.62
    - sonar:2.9
    - sse-gateway:1.19
    - ssh-credentials:1.17.1
    - ssh-slaves:1.30.1
    - structs:1.20
    - subversion:2.12.2
    - swarm:3.17
    - templating-engine:1.4.2
    - timestamper:1.10
    - token-macro:2.8
    - variant:1.3
    - workflow-aggregator:2.6
    - workflow-api:2.36
    - workflow-basic-steps:2.18
    - workflow-cps:2.73
    - workflow-cps-global-lib:2.15
    - workflow-durable-task-step:2.33
    - workflow-job:2.33
    - workflow-multibranch:2.21
    - workflow-remote-loader:1.5
    - workflow-scm-step:2.9
    - workflow-step-api:2.20
    - workflow-support:3.3
    - ws-cleanup:0.37


  # overwritePlugins: true
  enableRawHtmlMarkupFormatter: false
  scriptApproval:
  initScripts:
     - |
      /*
        Copyright Â© 2018 Booz Allen Hamilton. All Rights Reserved.
        This software package is licensed under the Booz Allen Public License. The license can be found in the License file or at http://boozallen.github.io/licenses/bapl
      */
      
      import jenkins.*
      import hudson.*
      import hudson.util.Secret
      import hudson.model.*
      import jenkins.model.*
      import hudson.security.*
      import jenkins.security.*
      import com.cloudbees.plugins.credentials.*
      import com.cloudbees.plugins.credentials.impl.*
      import com.cloudbees.plugins.credentials.common.*
      import com.cloudbees.plugins.credentials.domains.*
      import com.cloudbees.jenkins.plugins.sshcredentials.impl.*
      import com.cloudbees.plugins.credentials.CredentialsProvider
      import hudson.plugins.sshslaves.*
      import groovy.io.FileType
      import javaposse.jobdsl.dsl.DslScriptLoader
      import javaposse.jobdsl.plugin.JenkinsJobManagement
      import java.util.logging.Logger
      import org.jenkinsci.plugins.github_branch_source.GitHubConfiguration
      import org.jenkinsci.plugins.github_branch_source.Endpoint
      
      // for shared libraries
      import org.jenkinsci.plugins.workflow.libs.GlobalLibraries
      import org.jenkinsci.plugins.workflow.libs.LibraryConfiguration
      import org.jenkinsci.plugins.workflow.libs.SCMSourceRetriever
      import org.jenkinsci.plugins.workflow.libs.SCMRetriever
      import org.jenkinsci.plugins.github_branch_source.GitHubSCMSource
      import hudson.plugins.filesystem_scm.FSSCM
      
      // for security
      import jenkins.security.s2m.AdminWhitelistRule
      import hudson.security.csrf.DefaultCrumbIssuer
      import org.jenkinsci.plugins.configfiles.groovy.GroovyScript
      import org.jenkinsci.plugins.configfiles.GlobalConfigFiles
      import org.jenkinsci.plugins.scriptsecurity.scripts.languages.GroovyLanguage
      import jenkins.model.JenkinsLocationConfiguration
      import org.jenkinsci.plugins.workflow.flow.FlowDurabilityHint
      
      //for sonar installation
      import hudson.plugins.sonar.SonarInstallation
      import hudson.plugins.sonar.SonarRunnerInstallation
      import hudson.plugins.sonar.SonarRunnerInstaller
      import hudson.plugins.sonar.model.TriggersConfig
      import hudson.tools.InstallSourceProperty
      
      
      
      def sdp_jenkins_secret ="sdp-jenkins-secret"
      
      def logger = Logger.getLogger("")
      log = { message ->
        logger.info("${message}..")
      }
      
      log "sdp Jenkins Secret: ${sdp_jenkins_secret}"
      
      def jenkins = Jenkins.getInstance()
      
      // durability set to performance optimized
      durability = jenkins.getDescriptor("org.jenkinsci.plugins.workflow.flow.GlobalDefaultFlowDurabilityLevel")
      durability.setDurabilityHint(FlowDurabilityHint.PERFORMANCE_OPTIMIZED)
      jenkins.save()
      
      
      // create dummy admin user for connection agents
      log "Creating admin service account: sdp-jenkins-admin"
      jenkins_dummy_user = "sdp-jenkins-admin"
      def user = hudson.model.User.get(jenkins_dummy_user)
      user.setFullName("SDP Jenkins Administrator")
      dummy_pass = (1..20).collect([]){ ("a".."z").getAt(new Random().nextInt(26) % 26) }.join()
      user.addProperty(hudson.security.HudsonPrivateSecurityRealm.Details.fromPlainPassword(dummy_pass))
      
      // create dummy admin user api token and create openshift secret
      ApiTokenProperty t = user.getProperty(ApiTokenProperty.class)
      apitoken.ApiTokenStore.TokenUuidAndPlainValue tokenUuidAndPlainValue = t.tokenStore.generateNewToken('sdp-jenkins-secret')
      def token = tokenUuidAndPlainValue.plainValue
      user.save()
      
      log "Creating k8s secret ${sdp_jenkins_secret} with admin service account API token"
      part6 = "{\"metadata\":{\"name\":\"sdp-jenkins-secret\"},\"stringData\":{\"username\":\"sdp-jenkins-admin\"},\"stringData\":{\"token\": \"${token}\"}}"
      File file = new File("/var/jenkins_home/secret.json")
      file.write "${part6}"
      cmd = '/bin/bash -c "export K8S=https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT; export K8STOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token);export CACERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt;export NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace);curl -X DELETE \\$K8S/api/v1/namespaces/\\$NAMESPACE/secrets/sdp-jenkins-secret --cacert \\$CACERT -H \\\"Authorization: Bearer \\$K8STOKEN\\\";curl -X POST \\$K8S/api/v1/namespaces/default/secrets -H \\\"Content-Type: application/json\\\" --cacert \\$CACERT -H \\\"Authorization: Bearer \\$K8STOKEN\\\" -d @/var/jenkins_home/secret.json;"'
      File scriptFile = new File("/var/jenkins_home/secret.sh")
      scriptFile.write "${cmd}"
      log "cmd: ${cmd}"
      proc = "chmod +x /var/jenkins_home/secret.sh".execute()
      proc.waitFor()
      proc = "/var/jenkins_home/secret.sh".execute()
      proc.waitFor()
      log proc.text
      file.delete()
      scriptFile.delete()

      // create security matrix
      log "Creating authorization strategy to Global Matrix Authorization"
      GlobalMatrixAuthorizationStrategy newAuthMgr = new GlobalMatrixAuthorizationStrategy()

      // set default authenticated user permissions
      log "Setting default permissions for authenticated user"
      [
        Hudson.READ,
        Item.READ,
        Item.DISCOVER,
        CredentialsProvider.VIEW
      ].each{ permission ->
        log "  - ${permission}"
        newAuthMgr.add(permission, "authenticated");
      }

      // give dummy admin user ability to configure agents
      log "Giving permissions to SDP jenkins admin service account"
      [
        Jenkins.ADMINISTER,
        hudson.model.Computer.BUILD,
        hudson.model.Computer.CONFIGURE,
        hudson.model.Computer.CONNECT,
        hudson.model.Computer.CREATE,
        hudson.model.Computer.DELETE,
        hudson.model.Computer.DISCONNECT,
        hudson.model.Computer.EXTENDED_READ
      ].each{ permission ->
        log "  - ${permission}"
        newAuthMgr.add(permission, jenkins_dummy_user)
      }

      log "Giving permissions to jenkins admin service account"
      [
        Jenkins.ADMINISTER,
        hudson.model.Computer.BUILD,
        hudson.model.Computer.CONFIGURE,
        hudson.model.Computer.CONNECT,
        hudson.model.Computer.CREATE,
        hudson.model.Computer.DELETE,
        hudson.model.Computer.DISCONNECT,
        hudson.model.Computer.EXTENDED_READ
      ].each{ permission ->
        log "  - ${permission}"
        newAuthMgr.add(permission, "admin")
      }

      // apply matrix auth
      log "Applying Global Matrix Authorization Strategy"
      jenkins.setAuthorizationStrategy(newAuthMgr)
      jenkins.save()

      
      
      
      // optimize agents disconnecting post termination
      log "Configuring optmized agent pod deregistration settings"
      jenkins.injector.getInstance(hudson.slaves.ChannelPinger.class).@pingIntervalSeconds = 1
      jenkins.injector.getInstance(hudson.slaves.ChannelPinger.class).@pingTimeoutSeconds = 10
      
      // additional security settings
      log "Turning on Agent -> Master Control"
      jenkins.injector.getInstance(AdminWhitelistRule.class).setMasterKillSwitch(false)
      
      log "Removing Deprecated Protocols"
      def protocols = jenkins.AgentProtocol.all()
      protocols.each{ p ->
        if (!(p.name in [ "Ping", "JNLP4-connect" ]))
          protocols.remove(p)
      }
       
  secretsFilesSecret: jenkins-secrets
  secretCredentials:
  
  secretsMountPath: "/var/jenkins_secrets"
  jobs: {}

  JCasC:
    enabled: true
    pluginVersion: "1.29"
    # it's only used when plugin version is <=1.18 for later version the
    # configuration as code support plugin is no longer needed
    supportPluginVersion: "1.18"
    configScripts:
      sdp-credentials-config: |
        credentials:
          system:
            domainCredentials:
            - credentials:
      sdp-jenkins-config: |
        jenkins:
          agentProtocols:
          - "JNLP4-connect"
          - "Ping"
          authorizationStrategy:
            loggedInUsersCanDoAnything:
              allowAnonymousRead: false
          crumbIssuer:
            standard:
              excludeClientIPFromCrumb: true
          disableRememberMe: false
          markupFormatter: "plainText"
          mode: NORMAL
          myViewsTabBar: "standard"
          numExecutors: 0
          primaryView:
            all:
              name: "all"
          projectNamingStrategy: "standard"
          quietPeriod: 5
          remotingSecurity:
            enabled: true
          scmCheckoutRetryCount: 0
          securityRealm: "legacy"
          slaveAgentPort: 50000
          updateCenter:
            sites:
            - id: "default"
              url: "https://updates.jenkins.io/update-center.json"
          views:
          - all:
              name: "all"
          viewsTabBar: "standard"
      sdp-unclassified-config: |
        unclassified:
          buildStepOperation:
            enabled: false
          gitHubPluginConfig:
            hookUrl: "http://jenkins.default.svc:8080/github-webhook/"
          gitSCM:
            createAccountBasedOnEmail: false
          globalDefaultFlowDurabilityLevel:
            durabilityHint: PERFORMANCE_OPTIMIZED
          ivyBuildTrigger:
            extendedVersionMatching: false
          location:
            adminAddress: "address not configured yet <nobody@nowhere>"
            url: "http://jenkins.default.svc:8080/"
          mailer:
            charset: "UTF-8"
            useSsl: false
          mavenModuleSet:
            localRepository: "default"
          pollSCM:
            pollingThreadCount: 10
      sdp-security-config: |
        security:
          apiToken:
            creationOfLegacyTokenEnabled: false
            tokenGenerationOnCreationEnabled: false
            usageStatisticsEnabled: true
          globalJobDslSecurityConfiguration:
            useScriptSecurity: true
          sSHD:
            port: 1044


  customInitContainers: []

  sidecars:
    configAutoReload:
      enabled: true
      image: shadwell/k8s-sidecar:0.0.2
      imagePullPolicy: Always
      resources:
      sshTcpPort: 1044
      folder: "/var/jenkins_home/casc_configs"
      # searchNamespace:
    other:
  nodeSelector: {}
  tolerations: []
  # priorityClass: system-cluster-critical
  podAnnotations: {}

  customConfigMap: false
  overwriteConfig: false
  overwriteJobs: false
  affinty: 
  ingress:
    enabled: true
    apiVersion: "extensions/v1beta1"
    labels: {}
    annotations: {}
    kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # path: "/jenkins"
    hostName: jenkins.sdp.com
    tls:

  backendconfig:
    enabled: false
    apiVersion: "extensions/v1beta1"
    name:
    labels: {}
    annotations: {}
    spec: {}

  route:
    enabled: false
    labels: {}
    annotations: {}
    path: "jenkins.sdp.com"

  psp:
    enabled: false

  hostAliases: []

  prometheus:
    enabled: false
    serviceMonitorAdditionalLabels: {}
    # serviceMonitorNamespace: monitoring
    scrapeInterval: 60s
    scrapeEndpoint: /prometheus
    alertingRulesAdditionalLabels: {}
    alertingrules: []

agent:
  enabled: true
  image: "docker.pkg.github.com/boozallen/sdp-images/jenkins-agent"
  tag: "ubi-1.0"
  imagePullPolicy: "IfNotPresent"
  customJenkinsLabels: []
  imagePullSecretName: "github"
  componentName: "jenkins-agent"
  privileged: true
  resources:
    requests:
      cpu: "500m"
      memory: "256Mi"
    limits:
      cpu: "1"
      memory: "512Mi"
  nodeSelector: {}


persistence:
  enabled: false
  existingClaim: jenkins
  storageClass: "gp2"
  annotations: {}
  accessMode: "ReadWriteOnce"
  size: "50Gi"

networkPolicy:
  enabled: false
  apiVersion: networking.k8s.io/v1

rbac:
  create: true

scc:
  create: false

serviceAccount:
  create: true
  name: jenkinssa
  annotations: {}

serviceAccountAgent:
  create: true
  name: jenkinsagentsa
  annotations: {}

checkDeprecation: true
